

How to run the project:



MedTriage Server Startup Guide
This guide shows how to start the MedTriage project's backend (FastAPI) and frontend (React + Vite) servers locally.

Prerequisites
Ensure the project's virtual environment (venv) is set up and activated if needed.
Install backend dependencies: ./venv/bin/pip install -r requirements.txt
Install frontend dependencies: cd frontend && npm install
Step 1: Start the Backend Server
Run this command in a terminal from the project root (medtriage):


MEDTRIAGE_PRELOAD_ML=0 ./venv/bin/uvicorn main:app --reload --host 127.0.0.1 --port 8000



This starts FastAPI with auto-reload enabled.
MEDTRIAGE_PRELOAD_ML=0 skips ML model loading for faster startup.
Server runs on http://127.0.0.1:8000
Step 2: Start the Frontend Server
In a separate terminal, run:

cd frontend && npm run dev


This starts the Vite dev server.
Server typically runs on http://localhost:5173/ (or http://localhost:5174/ if 5173 is busy).
Useful Links (Once Running)
Backend API Docs: http://127.0.0.1:8000/docs
Demo Page: http://127.0.0.1:8000/browser_post.html
Frontend App: http://localhost:5173/
Notes
Both servers run in the background with auto-reload.
To stop, press Ctrl+C in each terminal.
If ports are in use, check with lsof -i :8000 or lsof -i :5173 and kill processes if needed.



Project Purpose
MedTriage is an AI-powered symptom checker MVP built with FastAPI. It triages medical symptoms using rule-based logic (and optional ML) to assess risk levels and suggest actions like "Visit ER immediately" for high-risk symptoms.

Why the Pages?
Backend (/docs and /browser_post.html):

/docs: Interactive API documentation for developers to test endpoints.
browser_post.html: Simple demo form to manually test the /triage endpoint without a full UI.
Frontend (React app at /):

Main user interface where patients can input symptoms and get triage results in a web app.
These pages enable testing, documentation, and user interaction for the triage system. The backend handles API logic, while the frontend provides a polished experience.











MedTriage — Quick Start Notes

Repo root: /Users/shakin/Developer/medtriage

1) Purpose
- FastAPI symptom triage demo (rule-based /triage, optional ML /triage_ml)
- Persists sessions + audit_log to DB (SQLite by default, MySQL when configured)

2) Environment (macOS, zsh)
- Use the project's venv: ./venv
- Python: use venv's python and pip

3) Install deps (if you add/remove packages)
/Users/shakin/Developer/medtriage/venv/bin/pip3 install -r requirements.txt

4) Database
- Default (dev): SQLite file at ./medtriage_dev.db
- MySQL (production/dev using MySQL): set env var MEDTRIAGE_DATABASE_URL
  Example MySQL URL (PyMySQL driver):
  export MEDTRIAGE_DATABASE_URL='mysql+pymysql://medtriage_db:1234@127.0.0.1:3306/medtriage_db'
- SQL schema files:
  - schema.sql -> full `sessions` + `audit_log` DDL
  - simple_schema.sql -> minimal quick-test table

5) Run server (dev)
- SQLite (default):
  /Users/shakin/Developer/medtriage/venv/bin/uvicorn main:app --reload
- MySQL (explicit):
  export MEDTRIAGE_DATABASE_URL='mysql+pymysql://medtriage_db:1234@127.0.0.1:3306/medtriage_db'
  /Users/shakin/Developer/medtriage/venv/bin/uvicorn main:app --reload

6) Endpoints
- GET /browser_post.html -> small HTML form to POST to /triage
- POST /triage -> rule-based triage
- POST /triage_ml -> optional ML triage (may download models if MEDTRIAGE_PRELOAD_ML=1 at startup)

7) DB behavior
- Each POST to /triage or /triage_ml will (when MEDTRIAGE_DATABASE_URL is set) insert a row into `sessions` and one into `audit_log`.
- The app defaults to SQLite if MEDTRIAGE_DATABASE_URL is not provided.

8) Quick verification (after starting server with MySQL)
- Submit POST (curl or browser) and check MySQL:
  mysql -h127.0.0.1 -P3306 -u medtriage_db -p'1234' -e "USE medtriage_db; SELECT * FROM sessions ORDER BY created_at DESC LIMIT 5; SELECT * FROM audit_log ORDER BY timestamp DESC LIMIT 5;"

9) Useful scripts
- scripts/test_insert.py -> posts a test triage (uses MEDTRIAGE_DATABASE_URL set in the script) and prints recent DB rows
- scripts/direct_insert.py -> tries a direct insert via crud.create_session_with_audit

10) Notes & next steps
- Logs: watch terminal running uvicorn for request logs
- PII: the app uses a basic regex anonymizer; replace with vetted de-id pipeline before storing PHI
- Optional: add /admin/sessions (guarded) to view recent sessions easily

11) Contact points in repo
- main.py -> FastAPI app and endpoints
- triage.py -> rule-based classifier
- ml_triage.py -> ML wrapper (optional)
- db.py -> SQLAlchemy engine & SessionLocal
- models.py -> ORM models (Session, AuditLog)
- crud.py -> create_session_with_audit
- schema.sql, simple_schema.sql -> DDL

That's it — resume here tomorrow by ensuring the venv is active, setting MEDTRIAGE_DATABASE_URL if you want MySQL, and starting uvicorn.


url:http://127.0.0.1:8000/browser_post.html


Day 2 - Run & Verification (added)

Status now
- Backend: FastAPI app is runnable from the project venv. Uvicorn is installed in `./venv`.
- Frontend: React + Vite in `./frontend` (dev server via `npm run dev`). A static quick-demo page is available at `/browser_post.html`.

How to run everything (exact commands)

1) Activate/use the project's venv (optional but recommended):
   # macOS / zsh - use the venv python directly or activate it
   source ./venv/bin/activate
   # or run commands via the venv python directly:
   ./venv/bin/uvicorn main:app --reload

2) Start the backend (FastAPI)
   # Start with ML preload disabled (fast startup):
   MEDTRIAGE_PRELOAD_ML=0 ./venv/bin/uvicorn main:app --reload --host 127.0.0.1 --port 8000

   # If you want the ML model preloaded (may take long & download model):
   MEDTRIAGE_PRELOAD_ML=1 ./venv/bin/uvicorn main:app --reload --host 127.0.0.1 --port 8000

3) Start the frontend (in a separate terminal)
   cd frontend
   npm install      # first time only
   npm run dev

Dev server notes: Vite commonly serves at http://localhost:5173/ and will fall back to 5174 if 5173 is busy. Check the terminal where `npm run dev` runs for the exact Local URL.

Useful URLs (when servers are running)
- Backend OpenAPI (Swagger UI): http://127.0.0.1:8000/docs
- Backend ReDoc: http://127.0.0.1:8000/redoc
- Simple demo HTML (no build): http://127.0.0.1:8000/browser_post.html
- Rule-based triage POST: http://127.0.0.1:8000/triage
- Optional ML triage POST: http://127.0.0.1:8000/triage_ml
- Frontend React app (Vite): http://localhost:5173/  (or http://localhost:5174/)

Admin /auth notes
- Admin endpoints (e.g., GET /admin/sessions) require admin auth.
- By default local dev accepts an X-Admin-Token header or Authorization: Bearer <token>. Set `MEDTRIAGE_ADMIN_TOKEN` in the environment where uvicorn runs to require that token.
- Optionally set `MEDTRIAGE_ADMIN_JWT_SECRET` and use a signed HS256 JWT with claim `{"role":"admin"}`.
- For quick local testing you can use the provided helper script (if present) or create a simple HS256 token using Python/pyjwt.

Quick smoke test (from another terminal)
- Test rule-based triage (curl):
  curl -s -X POST http://127.0.0.1:8000/triage -H "Content-Type: application/json" -d '{"symptom":"chest pain"}' | jq

- Test admin endpoint (replace TOKEN with your admin token):
  curl -s -H "X-Admin-Token: TOKEN" http://127.0.0.1:8000/admin/sessions | jq

Troubleshooting
- Port already in use on 8000: find the pid with `lsof -i :8000` and kill it (or choose another port and pass `--port`).
- Vite picks a fallback port if 5173 is busy; check the frontend terminal for the exact URL.
- If dependencies are missing, (re)install in the venv:
  ./venv/bin/python -m pip install -r requirements.txt
  cd frontend && npm install
- If FastAPI import-time errors appear, check the uvicorn terminal logs for stack traces and fix missing env vars (e.g., DB URL) or missing packages.

Next actions you may want to run now
- Start backend: MEDTRIAGE_PRELOAD_ML=0 ./venv/bin/uvicorn main:app --reload
- Start frontend: cd frontend && npm run dev




proper user manual:

Read [](file:///Users/shakin/Developer/medtriage/PROJECT_START.txt#1-1), lines 1 to 51

# MedTriage User Manual: How to Run the Project

## Overview
MedTriage is a symptom triage app with a FastAPI backend and React frontend. It uses rule-based logic by default, with an optional ML model (now DistilBERT-based zero-shot classification) for enhanced triage.

## Prerequisites
- Python 3.9+ with virtual environment
- Node.js and npm
- macOS (as per your setup)

## Quick Start Steps

### 1. Activate Virtual Environment
```bash
cd /Users/shakin/Developer/medtriage
source venv/bin/activate
```

### 2. Install Dependencies (if needed)
```bash
# Backend
pip install -r requirements.txt

# Frontend
cd frontend && npm install && cd ..
```

### 3. Start Backend Server
In one terminal:
```bash
MEDTRIAGE_PRELOAD_ML=0 ./venv/bin/uvicorn main:app --reload --host 127.0.0.1 --port 8000
```
- `MEDTRIAGE_PRELOAD_ML=0` for fast startup (ML loads on first use)
- `MEDTRIAGE_PRELOAD_ML=1` to preload ML model at startup (slower, downloads ~268MB model)

### 4. Start Frontend Server
In another terminal:
```bash
cd frontend && npm run dev
```

## Access Points
- **Frontend App**: http://localhost:5173/ (or 5174 if busy)
- **Backend API Docs**: http://127.0.0.1:8000/docs
- **Demo Page**: http://127.0.0.1:8000/browser_post.html
- **Rule-based Triage**: POST to http://127.0.0.1:8000/triage
- **ML Triage**: POST to http://127.0.0.1:8000/triage_ml (uses DistilBERT model)

## ML Model Details
- **Model**: `typeform/distilbert-base-uncased-mnli` (small DistilBERT for zero-shot classification)
- **Function**: Classifies symptoms into risk levels (high/medium/low) and maps to actions
- **Fallback**: If ML fails or confidence < 0.4, falls back to rule-based system
- **Download**: ~268MB on first use (internet required)

## Testing
```bash
# Test rule-based
curl -X POST http://127.0.0.1:8000/triage -H "Content-Type: application/json" -d '{"symptom":"chest pain"}'

# Test ML
curl -X POST http://127.0.0.1:8000/triage_ml -H "Content-Type: application/json" -d '{"symptom":"chest pain"}'
```

## Stopping Servers
- Press `Ctrl+C` in each terminal

## Troubleshooting
- **Port conflicts**: Check with `lsof -i :8000` or `lsof -i :5173`
- **ML issues**: Ensure internet for model download
- **Dependencies**: Reinstall if import errors

## Database (Optional)
- Defaults to SQLite (medtriage_dev.db)
- For MySQL: Set `MEDTRIAGE_DATABASE_URL` env var

That's it! Next time, just follow steps 1, 3, and 4. The ML model will work automatically.














Next: Add JWT-based authentication for user sessions and admin access, securing endpoints and demonstrating security expertise. (Implement with fastapi-jwt-auth library.)












## 🚀 Quick Start Guide for Tomorrow

### **1. Start MySQL Database**
```bash
# Make sure MySQL is running (if using local MySQL)
mysql.server start
```

### **2. Start Backend Server**
```bash
cd /Users/shakin/Developer/medtriage
source venv/bin/activate
export MEDTRIAGE_DATABASE_URL='mysql+pymysql://medtriage_db:1234@127.0.0.1:3306/medtriage_db'
MEDTRIAGE_PRELOAD_ML=0 ./venv/bin/uvicorn main:app --reload --host 127.0.0.1 --port 8000
```

### **3. Start Frontend Server** (in new terminal)
```bash
cd /Users/shakin/Developer/medtriage/frontend
npm run dev
```

### **4. Access the App**
- **Frontend**: http://localhost:5174
- **Backend API**: http://127.0.0.1:8000
- **API Docs**: http://127.0.0.1:8000/docs

### **Quick Commands Reference**
```bash
# Check if servers are running
curl -I http://127.0.0.1:8000/
curl -I http://localhost:5174/

# Kill servers if needed
lsof -ti:8000 | xargs kill -9
lsof -ti:5174 | xargs kill -9
```

That's it! Just run these commands in order and you'll be up and running. 🎉